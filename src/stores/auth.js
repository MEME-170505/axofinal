// ===== üîê STORE DE AUTENTICACI√ìN - CENTRO DE CONTROL DE SEGURIDAD =====
// Este store es el CEREBRO de toda la seguridad de la aplicaci√≥n
// Controla qui√©n puede acceder a qu√© y cu√°ndo

import { ref, computed } from 'vue'
import { defineStore } from 'pinia'

export const useAuthStore = defineStore('auth', () => {
  // ===== üíæ ESTADO REACTIVO GLOBAL =====
  // Esta variable contiene TODA la informaci√≥n del usuario actual
  const user = ref(null) // null = no hay usuario logueado

  // ===== üßÆ COMPUTED PROPERTIES - L√ìGICA INTELIGENTE =====
  // Estas funciones calculan autom√°ticamente el estado basado en los datos
  
  // ¬øHay alguien logueado? TRUE/FALSE
  const isAuthenticated = computed(() => {
    const authenticated = !!user.value
    console.log(`üîç Estado de autenticaci√≥n: ${authenticated ? '‚úÖ LOGUEADO' : '‚ùå NO LOGUEADO'}`)
    return authenticated
  })
  
  // ¬øEs administrador? Poder TOTAL sobre la aplicaci√≥n
  const isAdmin = computed(() => {
    const admin = user.value?.role === 'admin'
    if (admin) console.log('üëë Usuario con privilegios de ADMINISTRADOR')
    return admin
  })
  
  // ¬øEs cliente? Acceso limitado a sus propios datos
  const isClient = computed(() => {
    const client = user.value?.role === 'client'
    if (client) console.log('üë§ Usuario con rol de CLIENTE')
    return client
  })

  // ===== üö™ FUNCI√ìN DE LOGIN - PUERTA DE ENTRADA =====
  const login = (email, password) => {
    console.log(`üîë Intento de login para: ${email}`)
    
    // üß™ CREDENCIALES DE PRUEBA - En producci√≥n esto ser√≠a una API real
    
    // üë§ CLIENTE DE PRUEBA
    if (email === 'cliente@gmail.com' && password === 'cisco') {
      user.value = {
        id: 1,
        name: 'Mario Gonz√°lez',
        email: 'cliente@gmail.com',
        role: 'client',
        company: 'Empresa S.A. de C.V.',
        phone: '123-456-7890'
      }
      console.log('‚úÖ LOGIN EXITOSO - Cliente autenticado')
      return { success: true, user: user.value }
    } 
    // üëë ADMINISTRADOR DE PRUEBA
    else if (email === 'admin@gmail.com' && password === 'CISCO') {
      user.value = {
        id: 2,
        name: 'Administrador',
        email: 'admin@gmail.com',
        role: 'admin'
      }
      console.log('‚úÖ LOGIN EXITOSO - Administrador autenticado')
      return { success: true, user: user.value }
    } 
    // ‚ùå CREDENCIALES INCORRECTAS
    else {
      console.error('‚ùå LOGIN FALLIDO - Credenciales incorrectas')
      return { 
        success: false, 
        message: 'Credenciales incorrectas. Verifica tu email y contrase√±a.' 
      }
    }
  }

  // ===== üö™ FUNCI√ìN DE LOGOUT - SALIDA SEGURA =====
  const logout = () => {
    const userName = user.value?.name || 'Usuario desconocido'
    user.value = null // Limpiar TODOS los datos del usuario
    console.log(`üëã LOGOUT EXITOSO - ${userName} ha cerrado sesi√≥n`)
  }

  // ===== üì§ EXPORTAR FUNCIONES Y ESTADO =====
  // Estas son las funciones que otros componentes pueden usar
  return {
    // Estado
    user,
    // Computed properties
    isAuthenticated,
    isAdmin,
    isClient,
    // M√©todos
    login,
    logout
  }
})

// üìù NOTAS IMPORTANTES:
// - Este store se ejecuta en TODA la aplicaci√≥n
// - Los cambios aqu√≠ afectan INMEDIATAMENTE a todos los componentes
// - La seguridad de la app depende COMPLETAMENTE de este store
// - En producci√≥n, las credenciales vendr√≠an de una API segura