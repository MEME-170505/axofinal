// ===== üö® COMPOSABLE PARA ALERTAS GLOBALES - SISTEMA DE COMUNICACI√ìN UNIVERSAL =====
// Este sistema permite mostrar notificaciones en CUALQUIER parte de la aplicaci√≥n
// Es el MENSAJERO que comunica √©xitos, errores y advertencias al usuario

export function useAlert() {
  // ===== üéØ FUNCI√ìN PRINCIPAL PARA MOSTRAR ALERTAS =====
  // Esta funci√≥n es el CORAZ√ìN del sistema de notificaciones
  const showAlert = (type, title, message, duration = 4000) => {
    console.log(`üö® ALERTA ${type.toUpperCase()}: ${title} - ${message}`)
    
    // üì° Crear evento personalizado para comunicarse con CustomAlert.vue
    const event = new CustomEvent('show-alert', {
      detail: { type, title, message, duration }
    })
    
    // üåç Disparar el evento GLOBALMENTE - llega a toda la aplicaci√≥n
    window.dispatchEvent(event)
  }

  // ===== ‚úÖ ALERTA DE √âXITO - Para celebrar logros =====
  const showSuccess = (title, message = '') => {
    showAlert('success', title, message)
    console.log(`üéâ √âXITO: ${title}`)
  }

  // ===== ‚ùå ALERTA DE ERROR - Para reportar problemas CR√çTICOS =====
  const showError = (title, message = '') => {
    showAlert('error', title, message)
    console.error(`üí• ERROR: ${title} - ${message}`)
  }

  // ===== ‚ö†Ô∏è ALERTA DE ADVERTENCIA - Para situaciones que requieren ATENCI√ìN =====
  const showWarning = (title, message = '') => {
    showAlert('warning', title, message)
    console.warn(`‚ö†Ô∏è ADVERTENCIA: ${title}`)
  }

  // ===== ‚ÑπÔ∏è ALERTA INFORMATIVA - Para comunicar informaci√≥n IMPORTANTE =====
  const showInfo = (title, message = '') => {
    showAlert('info', title, message)
    console.info(`‚ÑπÔ∏è INFO: ${title}`)
  }

  // ===== ü§î DI√ÅLOGO DE CONFIRMACI√ìN - Reemplaza el confirm() nativo =====
  // Muestra un modal ELEGANTE en lugar del feo confirm() del navegador
  const showConfirm = (title, message, onConfirm, onCancel) => {
    console.log(`ü§î CONFIRMACI√ìN SOLICITADA: ${title}`)
    
    return new Promise((resolve) => {
      const confirmEvent = new CustomEvent('show-confirm', {
        detail: { 
          title, 
          message, 
          onConfirm: () => {
            console.log('‚úÖ Usuario CONFIRM√ì la acci√≥n')
            if (onConfirm) onConfirm()
            resolve(true) // Resuelve con TRUE si confirma
          },
          onCancel: () => {
            console.log('‚ùå Usuario CANCEL√ì la acci√≥n')
            if (onCancel) onCancel()
            resolve(false) // Resuelve con FALSE si cancela
          }
        }
      })
      window.dispatchEvent(confirmEvent)
    })
  }

  // ===== üì§ EXPORTAR FUNCIONES - API P√öBLICA DEL COMPOSABLE =====
  return {
    showSuccess,   // Para celebrar √©xitos
    showError,     // Para reportar errores
    showWarning,   // Para advertencias
    showInfo,      // Para informaci√≥n
    showConfirm    // Para confirmaciones
  }
}

// üìù EJEMPLOS DE USO:
// const { showSuccess, showError } = useAlert()
// showSuccess('¬°Pago creado!', 'El pago se registr√≥ correctamente')
// showError('Error cr√≠tico', 'No se pudo conectar con el servidor')

// üéØ VENTAJAS DE ESTE SISTEMA:
// ‚úÖ Consistencia visual en TODA la aplicaci√≥n
// ‚úÖ F√°cil de usar desde CUALQUIER componente
// ‚úÖ Configuraci√≥n centralizada
// ‚úÖ Animaciones y estilos profesionales
// ‚úÖ No depende de librer√≠as externas